import streamlit as st

def file_upload_screen(uploaded_files=None):
    """
    Giao di·ªán ch·ªâ cho upload file v√† n√∫t B·∫Øt ƒë·∫ßu.
    """
    st.markdown("### üìÑ T·∫£i l√™n t√†i li·ªáu (.txt, .pdf)")
    files = st.file_uploader(
        "Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu file:",
        type=["txt", "pdf"],
        accept_multiple_files=True,
        key="file_uploader",
        disabled=False
    )
    valid_files = []
    error_files = []
    if files:
        for f in files:
            if f.size == 0:
                error_files.append((f.name, "File r·ªóng"))
            elif not (f.name.lower().endswith(".txt") or f.name.lower().endswith(".pdf")):
                error_files.append((f.name, "ƒê·ªãnh d·∫°ng kh√¥ng h·ªó tr·ª£"))
            else:
                valid_files.append(f)
    if error_files:
        st.warning("M·ªôt s·ªë file kh√¥ng h·ª£p l·ªá s·∫Ω b·ªã b·ªè qua:")
        for fname, reason in error_files:
            st.write(f"- {fname}: {reason}")
    col1, col2 = st.columns([1,1])
    start_clicked = col1.button("üöÄ B·∫Øt ƒë·∫ßu", disabled=not valid_files)
    stop_clicked = col2.button("‚èπÔ∏è D·ª´ng", disabled=True)
    return valid_files, error_files, start_clicked, stop_clicked

def processing_screen(uploaded_files):
    """
    Giao di·ªán khi ƒëang x·ª≠ l√Ω file: ch·ªâ hi·ªán danh s√°ch file v√† n√∫t D·ª´ng.
    """
    st.markdown("### ‚è≥ ƒêang x·ª≠ l√Ω t√†i li·ªáu...")
    st.write("C√°c file ƒë√£ upload:")
    for f in uploaded_files:
        st.write(f"- {f.name}")
    stop_clicked = st.button("‚èπÔ∏è D·ª´ng")
    return stop_clicked

def chat_screen(messages, bot_answering):
    """
    Giao di·ªán chat: hi·ªÉn th·ªã l·ªãch s·ª≠ chat, nh·∫≠p c√¢u h·ªèi, ho·∫∑c n√∫t D·ª´ng khi bot ƒëang tr·∫£ l·ªùi.
    Tr·∫£ v·ªÅ: prompt m·ªõi, send_clicked, stop_clicked
    """
    st.markdown("---")
    st.markdown("### üí¨ L·ªãch s·ª≠ tr√≤ chuy·ªán")

    # Khu v·ª±c l·ªãch s·ª≠ chat, c·∫ßn padding ·ªü d∆∞·ªõi ƒë·ªÉ kh√¥ng b·ªã che b·ªüi thanh input c·ªë ƒë·ªãnh
    st.markdown("<div class='chat-history-area'>", unsafe_allow_html=True)
    for message in messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if message["role"] == "assistant" and "sources" in message:
                with st.expander("Xem ngu·ªìn tham kh·∫£o"):
                    for i, source in enumerate(message["sources"]):
                        st.caption(f"Ngu·ªìn {i+1} (T·ª´: {source['source']}, Chunk ID: {source['chunk_id']})")
                        st.markdown(source['content'][:300] + "...")
    st.markdown("</div>", unsafe_allow_html=True) # K·∫øt th√∫c chat-history-area
    
    prompt = None
    send_clicked = False
    stop_clicked = False

    # Thanh input c·ªë ƒë·ªãnh ·ªü d∆∞·ªõi b·∫±ng position:fixed
    st.markdown("<div class='fixed-chat-input-bar'>", unsafe_allow_html=True)
    col1, col2 = st.columns([9, 1]) 
    with col1:
        prompt = st.text_input(
            "Nh·∫≠p c√¢u h·ªèi...",
            key="custom_chat_input", 
            disabled=bot_answering,
            label_visibility="collapsed"
        )
    with col2:
        if bot_answering:
            stop_clicked = st.button("‚èπÔ∏è", key="stop_btn_chat", use_container_width=True)
        else:
            send_clicked = st.button("‚û§", key="send_btn_chat", use_container_width=True)
    st.markdown("</div>", unsafe_allow_html=True) # K·∫øt th√∫c fixed-chat-input-bar
    
    return prompt, send_clicked, stop_clicked

# (Code for file uploader, chat display, user input will go here) 